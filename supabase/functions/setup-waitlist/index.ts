import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    console.log('Attempting to create waitlist table...')
    
    // Note: Table creation should be done manually in Supabase Dashboard
    // This function will just populate test data

    // Insert test data
    const testData = [
      {
        name: 'Sarah Johnson',
        email: 'sarah.johnson@primaryschool.edu',
        organization: 'Meadowbrook Primary School',
        role: 'teacher',
        created_at: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'Dr. Michael Chen',
        email: 'michael.chen@childpsychology.uk',
        organization: 'London Child Psychology Centre',
        role: 'psychologist',
        created_at: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'Emma Thompson',
        email: 'emma.thompson@gmail.com',
        organization: null,
        role: 'parent',
        created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'James Wilson',
        email: 'j.wilson@stmarys-academy.org',
        organization: 'St. Mary\'s Academy',
        role: 'headteacher',
        created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'Dr. Rachel Green',
        email: 'r.green@nhs.uk',
        organization: 'NHS Greater Manchester Mental Health Trust',
        role: 'therapist',
        created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'Lisa Parker',
        email: 'lisa.parker@counselling.co.uk',
        organization: 'Parker Counselling Services',
        role: 'counselor',
        created_at: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'David Mitchell',
        email: 'dmitchell@yahoo.com',
        organization: null,
        role: 'parent',
        created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString()
      },
      {
        name: 'Anna Roberts',
        email: 'a.roberts@riverside-school.edu',
        organization: 'Riverside Community School',
        role: 'social-worker',
        created_at: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
      }
    ]

    const { data, error } = await supabaseClient
      .from('waitlist')
      .insert(testData)
      .select()

    if (error) {
      console.error('Error inserting test data:', error)
      return new Response(JSON.stringify({ 
        error: 'Table does not exist. Please create it first using the SQL commands below:', 
        sql: `
CREATE TABLE IF NOT EXISTS public.waitlist (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  organization TEXT,
  role TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

CREATE INDEX IF NOT EXISTS waitlist_email_idx ON public.waitlist(email);
CREATE INDEX IF NOT EXISTS waitlist_created_at_idx ON public.waitlist(created_at DESC);

ALTER TABLE public.waitlist ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable all operations for all users" ON public.waitlist FOR ALL USING (true);

GRANT ALL ON public.waitlist TO anon;
GRANT ALL ON public.waitlist TO authenticated;
GRANT ALL ON public.waitlist TO service_role;
        `,
        details: error 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      })
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `Successfully populated waitlist with ${data?.length || 0} test entries`,
        data: data
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )

  } catch (error) {
    console.error('Function error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    })
  }
})